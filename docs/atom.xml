<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Workingman&#x27;s Graph Databases </title>
    <link rel="self" type="application/atom+xml" href="https://csaatechnicalarts.github.io/rust-graph-databases/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://csaatechnicalarts.github.io/rust-graph-databases/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-03-29T00:00:00+00:00</updated>
    <id>https://csaatechnicalarts.github.io/rust-graph-databases/atom.xml</id>
    <entry xml:lang="en">
        <title>Cypher MATCH and WHERE</title>
        <published>2025-03-29T00:00:00+00:00</published>
        <updated>2025-03-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://csaatechnicalarts.github.io/rust-graph-databases/posts/cypher-match-where/"/>
        <id>https://csaatechnicalarts.github.io/rust-graph-databases/posts/cypher-match-where/</id>
        
        <content type="html" xml:base="https://csaatechnicalarts.github.io/rust-graph-databases/posts/cypher-match-where/">&lt;h2 id=&quot;match&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#match&quot; aria-label=&quot;Anchor link for: match&quot;&gt;MATCH&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;..&#x2F;..&#x2F;posts&#x2F;cypher-create-return&quot;&gt;preceeding post&lt;&#x2F;a&gt; we provisioned a graph network and populated it with nodes and relationships. There we saw how the
Kuzu Explorer displays the graph as interconnected nodes. Alternately the browser can also presents the data in tabular form as we have here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;csaatechnicalarts.github.io&#x2F;rust-graph-databases&#x2F;posts&#x2F;cypher-match-where&#x2F;2025_03_29-kuzugraph_city_user_table-800px.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When we want to query for patterns in the database, we turn to Cypher&#x27;s &lt;code&gt;MATCH&lt;&#x2F;code&gt; clause. Because Cypher is a &lt;em&gt;declarative
language&lt;&#x2F;em&gt;, we only need to supply the pattern and leave it up to the query engine to retrive the matching data.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;MATCH (u: User {name: &amp;#39;Carly&amp;#39;})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN u
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run this query at the command line, Kuzu returns the matching record.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kuzu&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-kuzu &quot;&gt;&lt;code class=&quot;language-kuzu&quot; data-lang=&quot;kuzu&quot;&gt;&lt;span&gt;{_ID: 0:0, _LABEL: User, name: Carly, age: 31}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;where-and-the-as-operator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-and-the-as-operator&quot; aria-label=&quot;Anchor link for: where-and-the-as-operator&quot;&gt;WHERE and the AS Operator&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the preceeding post we also introduced &lt;em&gt;variable labels&lt;&#x2F;em&gt; for graph nodes. These come in handy for pattern matching in Cypher
when we&#x27;re using Cypher&#x27;s &lt;code&gt;WHERE&lt;&#x2F;code&gt; clause. Combined with &lt;code&gt;MATCH&lt;&#x2F;code&gt;, the &lt;code&gt;WHERE&lt;&#x2F;code&gt; clause accepts node lables and properties
as parameters for our query patterns, applying &lt;em&gt;pattern filters&lt;&#x2F;em&gt; that we supply.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;MATCH (u: User)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;WHERE u.name = &amp;#39;Keinichi&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN u
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;kuzu&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-kuzu &quot;&gt;&lt;code class=&quot;language-kuzu&quot; data-lang=&quot;kuzu&quot;&gt;&lt;span&gt;{_ID: 0:1, _LABEL: User, name: Keinichi, age: 47
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cypher&#x27;s pattern filters come with a number of logical operators. In the example below, we apply &lt;code&gt;OR&lt;&#x2F;code&gt; to expand
the scope of the filtered match.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;MATCH (u: User)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;WHERE u.name = &amp;#39;Keinichi&amp;#39; OR u.name = &amp;#39;Carly&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN u.name AS PERSON
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-linenos data-lang=&quot;kuzu&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-kuzu &quot;&gt;&lt;code class=&quot;language-kuzu&quot; data-lang=&quot;kuzu&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;PERSON
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;Carly
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;Keinichi
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we also used another Cypher operator in that last query: &lt;code&gt;AS&lt;&#x2F;code&gt;.  The &lt;code&gt;AS&lt;&#x2F;code&gt; operator lets us introduce an alias for
a variable reference to make the query result more readable.&lt;&#x2F;p&gt;
&lt;p&gt;In our final examples we run queries against a graph network loaded with a few more informationi. Our goal here is
to use patterns that traverse the &lt;code&gt;LivesIn&lt;&#x2F;code&gt; and&#x2F;or the &lt;code&gt;Follows&lt;&#x2F;code&gt; relationship(s)
to link a user and a city.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;csaatechnicalarts.github.io&#x2F;rust-graph-databases&#x2F;posts&#x2F;cypher-match-where&#x2F;2025_0416-kuzugraph_user_city-800px.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;MATCH (u: User)-[LivesIn]-&amp;gt;(c: City)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;WHERE u.name = &amp;#39;Keinichi&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN u.name AS USER, c.name AS CITY
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;MATCH (c: City)&amp;lt;-[LivesIn]-(u: User)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;WHERE u.name = &amp;#39;Keinichi&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN u.name AS USER, c.name AS CITY
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;kuzu&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-kuzu &quot;&gt;&lt;code class=&quot;language-kuzu&quot; data-lang=&quot;kuzu&quot;&gt;&lt;span&gt;USER|CITY
&lt;&#x2F;span&gt;&lt;span&gt;Kenichi|Sendai
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the first query above, we present two versions of the query, showing how flexible Cypher can be
with relationship in the &lt;code&gt;MATCH&lt;&#x2F;code&gt; clause. The second query shows how we can chain nodes and relationships
to retrieve useful information from the graph.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;MATCH (u1: User)-[: Follows]-&amp;gt;(u2: User)-[: LivesIn]-&amp;gt;(c1: City)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;WHERE u1.name = &amp;#39;Keinichi&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN u2.name AS PERSON, c1.name AS CITY, c1.population AS CITY_POPULATION
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;kuzu&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-kuzu &quot;&gt;&lt;code class=&quot;language-kuzu&quot; data-lang=&quot;kuzu&quot;&gt;&lt;span&gt;PERSON|CITY|CITY_POPULATION
&lt;&#x2F;span&gt;&lt;span&gt;Akila|Cairo|4493410
&lt;&#x2F;span&gt;&lt;span&gt;Klaus|Stuttgart|632865
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;source-code&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#source-code&quot; aria-label=&quot;Anchor link for: source-code&quot;&gt;Source Code&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The code cited in this post comes from &lt;code&gt;kuzu_match.rs&lt;&#x2F;code&gt;. To run that however, you&#x27;ll need to execute &lt;code&gt;kuzu_create_return.rs&lt;&#x2F;code&gt; first
in order to provision a graph database and populate it with with data. &lt;code&gt;kuzu_create_return.rs&lt;&#x2F;code&gt; need only be executed once.
Both Rust programs work with the graph database created in &lt;code&gt;&#x2F;tmp&#x2F;kuzu_db&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;csaatechnicalarts&#x2F;rust-graph-databases&#x2F;blob&#x2F;main&#x2F;learn_cypher&#x2F;src&#x2F;bin&#x2F;kuzu_create_return.rs&quot;&gt;kuzu_create_return.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;csaatechnicalarts&#x2F;rust-graph-databases&#x2F;blob&#x2F;main&#x2F;learn_cypher&#x2F;src&#x2F;bin&#x2F;kuzu_match.rs&quot;&gt;kuzu_match.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr&#x2F;&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cypher CREATE and RETURN</title>
        <published>2025-03-26T00:00:00+00:00</published>
        <updated>2025-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://csaatechnicalarts.github.io/rust-graph-databases/posts/cypher-create-return/"/>
        <id>https://csaatechnicalarts.github.io/rust-graph-databases/posts/cypher-create-return/</id>
        
        <content type="html" xml:base="https://csaatechnicalarts.github.io/rust-graph-databases/posts/cypher-create-return/">&lt;h2 id=&quot;create&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#create&quot; aria-label=&quot;Anchor link for: create&quot;&gt;CREATE&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Starting with an empty graph database, our first task is to lay down the database schehma. As we go about this, the Cypher &lt;code&gt;CREATE&lt;&#x2F;code&gt;
clause comes in handy for provisioning database tables that store &lt;em&gt;graph nodes&lt;&#x2F;em&gt; and the &lt;em&gt;relationships&lt;&#x2F;em&gt; between them.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simple schema made up of two node tables: &lt;code&gt;User&lt;&#x2F;code&gt; and &lt;code&gt;City&lt;&#x2F;code&gt;. Immedately after we specify them, we create
the &lt;code&gt;Follows&lt;&#x2F;code&gt; &lt;code&gt;LivesIn&lt;&#x2F;code&gt; and &lt;code&gt;FriendshipCity&lt;&#x2F;code&gt; tables to store the various relationships between users and cities.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span&gt;CREATE NODE TABLE User (name STRING, age INT64, PRIMARY KEY(name));
&lt;&#x2F;span&gt;&lt;span&gt;CREATE NODE TABLE City (name STRING, population INT64, PRIMARY KEY(name));
&lt;&#x2F;span&gt;&lt;span&gt;CREATE REL TABLE Follows (FROM User TO User, since DATE);
&lt;&#x2F;span&gt;&lt;span&gt;CREATE REL TABLE LivesIn (FROM User TO City, since DATE);
&lt;&#x2F;span&gt;&lt;span&gt;CREATE REL TABLE FriendshipCity (FROM City TO City, since DATE);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the next section we&#x27;ll see how  to use &lt;code&gt;CREATE&lt;&#x2F;code&gt; to insert nodes and relationships into the tables we&#x27;ve provisioned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;return&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#return&quot; aria-label=&quot;Anchor link for: return&quot;&gt;RETURN&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;RETURN&lt;&#x2F;code&gt; clause retrieves data from the graph database. There can only be one &lt;code&gt;RETURN&lt;&#x2F;code&gt; clause per Cypher statement,
except for statements involving &lt;code&gt;UNION&lt;&#x2F;code&gt; and subqueries. We rely on curly brackets to denote node and relationship &lt;em&gt;properties&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take up where we left off earlier. After creating the node and relationshipo tables, we continue with statements that insert data
into the &lt;code&gt;User&lt;&#x2F;code&gt;, &lt;code&gt;City&lt;&#x2F;code&gt;, &lt;code&gt;FriendshipCity&lt;&#x2F;code&gt; and &lt;code&gt;LivesIn&lt;&#x2F;code&gt; tables.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (u1: User {name: &amp;#39;Carly&amp;#39;, age: 31}), (u2: User {name: &amp;#39;Keinichi&amp;#39;, age: 47})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (u1)-[f: Follows {since: DATE(&amp;#39;2025-03-25&amp;#39;)}]-&amp;gt;(u2)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (c1: City {name: &amp;#39;Dallas&amp;#39;, population: 1302638})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (c2: City {name: &amp;#39;Sendai&amp;#39;, population: 2341000})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (c1)-[fc01: FriendshipCity {since: DATE(&amp;#39;1997-08-01&amp;#39;)}]-&amp;gt;(c2)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (u1)-[l01: LivesIn]-&amp;gt;(c1)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (u2)-[l02: LivesIn]-&amp;gt;(c2)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;RETURN *;    
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kuzudb&#x2F;explorer&quot;&gt;Kuzu Explorer&lt;&#x2F;a&gt; maps our graph network, showing the two node types and their connecting relationships.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;csaatechnicalarts.github.io&#x2F;rust-graph-databases&#x2F;posts&#x2F;cypher-create-return&#x2F;2025_0326-kuzugraph_city_user-800px.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At the end of the statement, we have the &lt;code&gt;RETURN&lt;&#x2F;code&gt; clause present everything we&#x27;ve loaded into the graph database.
The section below shows the Kuzu output as it appears on the command line.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;KuzuDB&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-KuzuDB &quot;&gt;&lt;code class=&quot;language-KuzuDB&quot; data-lang=&quot;KuzuDB&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(label:User, 0:0, {name:Carly,age:31})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(label:User, 0:1, {name:Keinichi,age:47})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(0:0)-[label:Follows, {since:2025-03-25}]-&amp;gt;(0:1)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(label:City, 1:0, {name:Dallas,population:1302638})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(label:City, 1:1, {name:Sendai,population:2341000})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(1:0)-[label:FriendshipCity, {since:1997-08-01}]-&amp;gt;(1:1)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(0:0)-[label:LivesIn, {since:}]-&amp;gt;(1:0)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(0:1)-[label:LivesIn, {since:}]-&amp;gt;(1:1)*
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note how the graph database uses &lt;em&gt;tuples&lt;&#x2F;em&gt; to tag a node, with each tuple representing table and row identifier
that, together, maps to a specific node. For example with the &lt;code&gt;User&lt;&#x2F;code&gt; table tagged as &lt;code&gt;0&lt;&#x2F;code&gt;, and the first and second
rows tagged as &lt;code&gt;0&lt;&#x2F;code&gt; and &lt;code&gt;1&lt;&#x2F;code&gt; respectively, the tuple &lt;code&gt;0:1&lt;&#x2F;code&gt; maps to
the second record in the &lt;code&gt;User&lt;&#x2F;code&gt; table, the database record for the node &lt;code&gt;{name:Keinichi,age:47}&lt;&#x2F;code&gt;
(line 2).&lt;&#x2F;p&gt;
&lt;p&gt;These tuples are used in the same way for handling relationship data. For &lt;code&gt;(1:0)-[label:FriendshipCity, {since:1997-08-01}]-&amp;gt;(1:1)&lt;&#x2F;code&gt;
that matches a &lt;code&gt;FriendshipCity&lt;&#x2F;code&gt; relationship between Dallas and Sendai, nodes &lt;code&gt;1:0&lt;&#x2F;code&gt; and &lt;code&gt;1:1&lt;&#x2F;code&gt; respectively
refer to first and second graph nodes stored in the &lt;code&gt;City&lt;&#x2F;code&gt; table.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference-variables-and-labels&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reference-variables-and-labels&quot; aria-label=&quot;Anchor link for: reference-variables-and-labels&quot;&gt;REFERENCE VARIABLES and LABELS&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the Kuzu output above, the node type is indicated by a &lt;em&gt;label&lt;&#x2F;em&gt;. The same holds true for a relationship. You may also
have noticed that we use reference variables for labels as placeholders for Cypher nodes. For example, in these insert clauses&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;u1&lt;&#x2F;code&gt; and &lt;code&gt;c2&lt;&#x2F;code&gt; are labels for data in the &lt;code&gt;User&lt;&#x2F;code&gt; and &lt;code&gt; City&lt;&#x2F;code&gt; tables.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;cypher&quot; style=&quot;background-color:#383838;color:#e6e1dc;&quot; class=&quot;language-cypher &quot;&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (u1: User {name: &amp;#39;Carly&amp;#39;, age: 31}), (u2: User {name: &amp;#39;Keinichi&amp;#39;, age: 47})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;CREATE (c1: City {name: &amp;#39;Dallas&amp;#39;, population: 1302638})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s all for Cypher reference variables. While we&#x27;ve used these node labels superficially thus far, you&#x27;ll see more of them once we write Cypher statements
that use the &lt;code&gt;MATCH&lt;&#x2F;code&gt; clause.&lt;&#x2F;p&gt;
&lt;p&gt;One final note before we close. A &lt;code&gt;CREATE&lt;&#x2F;code&gt; statement doesn&#x27;t perform any database lookup prior to inserting any
new data. Effectively, reference variables are only visible within the same Cypher statements, not across them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;source-code&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#source-code&quot; aria-label=&quot;Anchor link for: source-code&quot;&gt;Source Code&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;csaatechnicalarts&#x2F;rust-graph-databases&#x2F;blob&#x2F;main&#x2F;learn_cypher&#x2F;src&#x2F;bin&#x2F;kuzu_create_return.rs&quot;&gt;kuzu_create_return.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr&#x2F;&gt;
</content>
        
    </entry>
</feed>
